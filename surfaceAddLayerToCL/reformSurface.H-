

const faceList &   faces = surf123.faces();
const pointField &   points = surf123.points();
int nInternalFaces = surf123.nInternalFaces();

const edgeList & 	edges = surf123.edges();
labelList 	edgesNInternalFaces(edges.size(),0);
labelList 	pointNewPoints(points.size(),-2);

const labelListList &   edgesFs = surf123.edgeFaces();


Info<<"  finding Internal edge faces" <<endl;

//~ forAll(edges, ei)
//~ {	const labelList& efs = edgesFs[ei];
	//~ forAll(efs, fI)
		//~ if (efs[fI]<nInternalFaces)
		//~ {
			//~ ++edgesNInternalFaces[ei];
//~ }		}


	///. generate a list of new points and faces to be added:
	///. 3 points for each contact line point and 3 faces for 
	///. each contact line edge
	int iNewP=-1;
	int iNewF=-1;
	forAll(edges, ei)
	  if (pMarks[edges[ei].start()]==4 && pMarks[edges[ei].end()]==4)
	  {
		++iNewF;
		edge e=edges[ei];
		if (pointNewPoints[e.end()  ]<0) pointNewPoints[e.end()  ]=++iNewP;
		if (pointNewPoints[e.start()]<0) pointNewPoints[e.start()]=++iNewP;
	  }///\\\///\\\///\\\///\\\///
	
	///. add 3 faces for each edge in contact line
	faceList  newFaces(3*(iNewF+1), face(4));
	iNewF=-1;
	forAll(edges, ei)
	  if (pMarks[edges[ei].start()]==4 && pMarks[edges[ei].end()]==4)
	  {
		++iNewF;
		edge e=edges[ei];
		newFaces[iNewF][0]=e.start();
		newFaces[iNewF][1]=e.end();
		newFaces[iNewF][2]=pointNewPoints[e.end()];
		newFaces[iNewF][3]=pointNewPoints[e.start()];
	  }///\\\///\\\///\\\///\\\///













    { ///. add newFaces to surf123  faces

		faceList facesSorted_All(faces.size()+newFaces.size());
		labelList zoneSizes(3);
		
		int indF=-1;
		for (int i=0; i<faces.size(); ++i) /// water-rock interface
		  if(fMarks[i]==1) 
		  {
			face f=faces[i];
			forAll(f, fi)
				if(pointNewPoints[f[fi]]>0) f[fi] = pointNewPoints[f[fi]]+1-1;
			facesSorted_All[++indF] = f;
		  }
		for (int i=0; i<newFaces.size(); ++i)
		{
			face f=newFaces[i];
			forAll(f, fi)
				if(pointNewPoints[f[fi]]>0) f[fi] = pointNewPoints[f[fi]]+1-1;
			facesSorted_All[++indF] = f;
		}
			
		zoneSizes[0]=indF+1; 
		for (int i=0; i<faces.size(); ++i) /// water-oil interface
		  if(fMarks[i]==2) 
		  {
			face f=faces[i];
			forAll(f, fi)
				if(pointNewPoints[f[fi]]>0) f[fi] = pointNewPoints[f[fi]]+2-1;
			facesSorted_All[++indF] = f;
		  }
		for (int i=0; i<newFaces.size(); ++i)
		{
			facesSorted_All[++indF]=faces[i];
		}
		zoneSizes[1]=indF+1-zoneSizes[0]; 
		for (int i=0; i<faces.size(); ++i)  /// oil-rock interface
		  if(fMarks[i]==3) 
		  {
			face f=faces[i];
			forAll(f, fi)
				if(pointNewPoints[f[fi]]>0) f[fi] = pointNewPoints[f[fi]]+3-1;
			facesSorted_All[++indF] = f;
		  }
		for (int i=0; i<newFaces.size(); ++i)
		{
			facesSorted_All[++indF]=faces[i];
		}
		zoneSizes[2]=indF+1-zoneSizes[1]-zoneSizes[0]; 

		Info<<faces.size()<<" ?= "<<facesSorted_All.size()<<endl;


        Xfer<List<face> > facesFer(facesSorted_All,true);
        Field<point> & pointsSF=points;
        Xfer<Field<point> > pointsFer(pointsSF,true);
        meshedSurface surf1(pointsFer, facesFer, zoneSizes);
		//~ surf1.addZones();
        //~ surf.triangulate ();

        surf1.write(outputSurface);

        
        //~ std::ofstream  offile("fMarks.txt");
        //~ for (int i=0; i<fMarks.size(); ++i)		offile<<fMarks[i]<<"  ";
		//~ offile.close();
    }







    //~ { ///. detach old faces from contact line and attach them to the newFaces
		//~ for (int i=0; i<faces.size(); ++i) /// water-oil interface
		  //~ if(fMarks[i]==2) 
		  //~ {
			//~ face f=faces[i];
			//~ forAll(f, fi)
				//~ if(pointNewPoints[f[fi]]>0) f[fi] = pointNewPoints[f[fi]]+2-1;
			//~ facesSorted_All[++indF] = f;
		  //~ }
	//~ }















